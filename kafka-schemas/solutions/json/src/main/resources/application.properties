# Application persistence
quarkus.datasource.db-kind = h2
quarkus.datasource.jdbc.url = jdbc:h2:mem:default;DB_CLOSE_DELAY=-1
quarkus.datasource.jdbc.max-size = 8
quarkus.datasource.jdbc.min-size = 2
quarkus.hibernate-orm.dialect = org.hibernate.dialect.H2Dialect
quarkus.hibernate-orm.database.generation = drop-and-create
quarkus.hibernate-orm.log.sql = false
quarkus.hibernate-orm.sql-load-script = import.sql

# @todo: configure the outgoing channel
mp.messaging.outgoing.bank-account-creation-out.connector = smallrye-kafka
mp.messaging.outgoing.bank-account-creation-out.topic = bank-account-creation
mp.messaging.outgoing.bank-account-creation-out.key.serializer = org.apache.kafka.common.serialization.LongSerializer
mp.messaging.outgoing.bank-account-creation-out.value.serializer = io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# @todo: configure the incoming channel
mp.messaging.incoming.bank-account-creation-in.connector = smallrye-kafka
mp.messaging.incoming.bank-account-creation-in.topic = bank-account-creation
mp.messaging.incoming.bank-account-creation-in.key.deserializer = org.apache.kafka.common.serialization.LongDeserializer
mp.messaging.incoming.bank-account-creation-in.value.deserializer = com.redhat.training.bank.event.BankAccountWasCreatedDeserializer




#  configure the key and value serializers
# mp.messaging.outgoing.customer-invoices.key.serializer = org.apache.kafka.common.serialization.StringSerializer
# mp.messaging.outgoing.customer-invoices.value.serializer = io.quarkus.kafka.client.serialization.JsonbSerializer
