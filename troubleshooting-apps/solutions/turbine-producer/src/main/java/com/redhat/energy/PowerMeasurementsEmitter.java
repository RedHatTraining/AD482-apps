package com.redhat.energy;

import java.util.Properties;
import java.util.concurrent.CompletableFuture;

import org.apache.kafka.clients.producer.Callback;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;

/**
 * Emits (produces) generated power measurements to Kafka
 */
public class PowerMeasurementsEmitter {

    private String topic;
    private Producer<Integer, Integer> powerProducer;
    private Boolean useTurbineTimestamps;

    public PowerMeasurementsEmitter(String topic, Properties props) {
        this.topic = topic;
        this.useTurbineTimestamps = false;
        powerProducer = new KafkaProducer<>(props);
    }

    /**
     * Emits (produces) power measurements into a Kafka topic
     * @param data the data object generated by the wind turbine
     */
    public void emit(TurbineData data) {
        if (useTurbineTimestamps) {
            produceWithPotentialDelay(data);
        } else {
            produce(data);
        }
    }

    /**
     * Activates the use of turbine timestamps (included in {@link TurbineData} objects).
     * If active, then the Kafka producer will produce records using the turbine timestamps.
     * @return
     */
    public PowerMeasurementsEmitter withTurbineTimestamps() {
        useTurbineTimestamps = true;
        return this;
    }

    private void produce(TurbineData data) {
        produce(data, false);
    }

    private void produce(TurbineData data, Boolean isDelayed) {
        ProducerRecord<Integer, Integer> record = createRecord(data);

        Callback callback = new Callback() {
            @Override
            public void onCompletion(RecordMetadata metadata, Exception e) {
                if (e != null) {
                    System.out.println(e);
                } else {
                    String delayed = isDelayed ? " - DELAYED!" : "";
                    String timestamp = useTurbineTimestamps ? " - Timestamp: " + data.timestamp : "";
                    System.out.println("Produced " + data + timestamp + delayed);
                }
            }
        };

        powerProducer.send(record, callback);
    }

    private void produceWithPotentialDelay(TurbineData data) {
        CompletableFuture.supplyAsync(() -> {
            Boolean delayed = false;

            if (data.tick % 3 == 0) {
                simulateDelay();
                delayed = true;
            }

            produce(data, delayed);

            return null;
        });
    }

    private ProducerRecord<Integer, Integer> createRecord(TurbineData data) {
        ProducerRecord<Integer, Integer> record;

        if (useTurbineTimestamps) {
            record = new ProducerRecord<>(
                topic,
                null,
                data.timestamp,
                data.turbineId,
                data.power
            );
        } else {
            record = new ProducerRecord<>(topic, data.turbineId, data.power);
        }

        return record;
    }

    private void simulateDelay() {
        try {
            Thread.sleep(11000);
        } catch (InterruptedException e1) {
            e1.printStackTrace();
        }
    }
}
